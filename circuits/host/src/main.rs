// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    IMPOSTER_GAME_ELF, IMPOSTER_GAME_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::collections::HashMap;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // Create a HashMap for roles
    let mut roles: HashMap<u32, String> = HashMap::new();
    roles.insert(1, "detective".to_string());
    roles.insert(2, "detective".to_string());
    roles.insert(3, "imposter".to_string());
    
    // Create a new HashMap for voters and votes
    let mut votes: HashMap<u32, u32> = HashMap::new();
    votes.insert(1, 3);
    votes.insert(2, 3);
    votes.insert(3, 1);

    // Pass the HashMap to the guest program
    let env = ExecutorEnv::builder()
        .write(&roles)
        .unwrap()
        .write(&votes)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, IMPOSTER_GAME_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output: u32 = receipt.journal.decode().unwrap();

    println!("Generated a proof of the guest program. Player {} was voted as the imposter and is recorded in the journal ", output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(IMPOSTER_GAME_ID)
        .unwrap();
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::collections::HashMap;

    fn setup_env<'a>(roles: HashMap<u32, String>, votes: HashMap<u32, u32>) -> ExecutorEnv<'a> {
        ExecutorEnv::builder()
            .write(&roles)
            .unwrap()
            .write(&votes)
            .unwrap()
            .build()
            .unwrap()
    }

    #[test]
    fn test_case_1() {
        println!("Running test case 1");
        let mut roles: HashMap<u32, String> = HashMap::new();
        roles.insert(1, "detective".to_string());
        roles.insert(2, "detective".to_string());
        roles.insert(3, "imposter".to_string());

        let mut votes: HashMap<u32, u32> = HashMap::new();
        votes.insert(1, 3);
        votes.insert(2, 3);
        votes.insert(3, 1);

        let env = setup_env(roles, votes);
        let prover = default_prover();
        let prove_info = prover.prove(env, IMPOSTER_GAME_ELF).unwrap();
        let receipt = prove_info.receipt;
        let output: u32 = receipt.journal.decode().unwrap();

        assert_eq!(output, 3);
    }

    #[test]
    fn test_case_2() {
        println!("Running test case 2");
        let mut roles: HashMap<u32, String> = HashMap::new();
        roles.insert(1, "imposter".to_string());
        roles.insert(2, "detective".to_string());
        roles.insert(3, "detective".to_string());

        let mut votes: HashMap<u32, u32> = HashMap::new();
        votes.insert(1, 2);
        votes.insert(2, 1);
        votes.insert(3, 1);

        let env = setup_env(roles, votes);
        let prover = default_prover();
        let prove_info = prover.prove(env, IMPOSTER_GAME_ELF).unwrap();
        let receipt = prove_info.receipt;
        let output: u32 = receipt.journal.decode().unwrap();

        assert_eq!(output, 1);
    }

    #[test]
    fn test_case_3() {
        println!("Running test case 3");
        let mut roles: HashMap<u32, String> = HashMap::new();
        roles.insert(1, "detective".to_string());
        roles.insert(2, "imposter".to_string());
        roles.insert(3, "detective".to_string());

        let mut votes: HashMap<u32, u32> = HashMap::new();
        votes.insert(1, 2);
        votes.insert(2, 3);
        votes.insert(3, 2);

        let env = setup_env(roles, votes);
        let prover = default_prover();
        let prove_info = prover.prove(env, IMPOSTER_GAME_ELF).unwrap();
        let receipt = prove_info.receipt;
        let output: u32 = receipt.journal.decode().unwrap();

        assert_eq!(output, 2);
    }
}
